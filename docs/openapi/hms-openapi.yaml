openapi: 3.1.0
info:
  title: Hospital Management System API
  version: 1.0.0
  description: |
    REST API specification for a learning-focused Hospital Management System (HMS) built with .NET.
    Includes modules for Patients, Doctors, Appointments, Admissions, Clinical (Vitals, Prescriptions),
    Pharmacy, Laboratory, Billing, Insurance, Scheduling, Notifications, Audit, Config, Reporting, and Lookups.
servers:
  - url: https://{host}/api/v1
    variables:
      host:
        default: localhost:5001
        description: API host and port
tags:
  - name: Auth
  - name: Users
  - name: Patients
  - name: Doctors
  - name: Departments
  - name: Wards
  - name: Beds
  - name: Appointments
  - name: Admissions
  - name: Encounters
  - name: Vitals
  - name: Prescriptions
  - name: Pharmacy
  - name: Laboratory
  - name: Billing
  - name: Insurance
  - name: Scheduling
  - name: Notifications
  - name: Audit
  - name: Config
  - name: Reporting
  - name: Lookups
externalDocs:
  description: Project wiki (add later)
  url: https://example.com/wiki
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageParam:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    SizeParam:
      name: size
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    SortParam:
      name: sort
      in: query
      required: false
      schema:
        type: string
        example: createdAt
    OrderParam:
      name: order
      in: query
      required: false
      schema:
        type: string
        enum: [asc, desc]
        default: desc
  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: array
              items:
                type: string
          required: [code, message]
      required: [error]
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        role:
          type: string
          enum: [Admin, Doctor, Nurse, Receptionist, Pharmacist]
        active: { type: boolean }
        createdAt: { type: string, format: date-time }
    Patient:
      type: object
      properties:
        id: { type: string, example: PAT-000123 }
        mrn: { type: string, example: MRN-001122 }
        firstName: { type: string }
        lastName: { type: string }
        dob: { type: string, format: date }
        gender: { type: string, enum: [M, F, O] }
        contact:
          type: object
          properties:
            phone: { type: string }
            email: { type: string, format: email }
        address: { type: string }
        nationalId: { type: string }
        status: { type: string, enum: [inpatient, outpatient, discharged] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, firstName, lastName, dob, gender]
    Doctor:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        specialties:
          type: array
          items: { type: string }
        licenseNo: { type: string }
        contact:
          type: object
          properties:
            phone: { type: string }
            email: { type: string, format: email }
        active: { type: boolean }
    Appointment:
      type: object
      properties:
        id: { type: string }
        patientId: { type: string }
        doctorId: { type: string }
        start: { type: string, format: date-time }
        end: { type: string, format: date-time }
        type: { type: string, enum: [physical, online] }
        status: { type: string, enum: [booked, completed, cancelled, conflict] }
        location: { type: string }
        notes: { type: string }
        createdAt: { type: string, format: date-time }
    Admission:
      type: object
      properties:
        id: { type: string }
        patientId: { type: string }
        wardId: { type: string }
        bedId: { type: string }
        admittingDoctorId: { type: string }
        admitAt: { type: string, format: date-time }
        status: { type: string, enum: [active, discharged] }
        dischargeAt: { type: string, format: date-time, nullable: true }
    Prescription:
      type: object
      properties:
        id: { type: string }
        patientId: { type: string }
        prescribedBy: { type: string }
        status: { type: string, enum: [active, cancelled] }
        lines:
          type: array
          items:
            type: object
            properties:
              drugId: { type: string }
              dosage: { type: string }
              route: { type: string, example: PO }
              frequency: { type: string, example: TID }
              durationDays: { type: integer }
              instructions: { type: string }
        createdAt: { type: string, format: date-time }
    Drug:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        sku: { type: string }
        form: { type: string }
        unitPrice: { type: number, format: float }
        stock: { type: integer }
        expiry: { type: string, format: date }
        reorderLevel: { type: integer }
        supplierId: { type: string }
    LabTest:
      type: object
      properties:
        code: { type: string, example: CBC }
        name: { type: string }
        tatHours: { type: integer }
        sampleType: { type: string, example: Blood }
    LabOrder:
      type: object
      properties:
        id: { type: string }
        patientId: { type: string }
        orderedBy: { type: string }
        tests:
          type: array
          items:
            type: object
            properties:
              code: { type: string }
        priority: { type: string, enum: [routine, stat] }
        status: { type: string, enum: [pending, in-progress, completed, cancelled] }
        createdAt: { type: string, format: date-time }
        results:
          type: array
          items:
            type: object
            properties:
              testCode: { type: string }
              values:
                type: array
                items:
                  type: object
                  properties:
                    param: { type: string }
                    value: { type: number }
                    unit: { type: string }
                    ref: { type: string }
    Invoice:
      type: object
      properties:
        id: { type: string }
        patientId: { type: string }
        lines:
          type: array
          items:
            type: object
            properties:
              type: { type: string, enum: [service, lab, pharmacy] }
              refId: { type: string }
              description: { type: string }
              amount: { type: number, format: float }
        subtotal: { type: number, format: float }
        discount: { type: number, format: float }
        total: { type: number, format: float }
        balance: { type: number, format: float }
        status: { type: string, enum: [unpaid, paid, void] }
        createdAt: { type: string, format: date-time }
    Payment:
      type: object
      properties:
        id: { type: string }
        invoiceId: { type: string }
        method: { type: string, enum: [cash, card, insurance] }
        amount: { type: number, format: float }
        paidAt: { type: string, format: date-time }
        txnRef: { type: string }
security:
  - bearerAuth: []
paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string }
              required: [email, password]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  expiresIn: { type: integer }
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/ErrorResponse'
  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken: { type: string }
              required: [refreshToken]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  expiresIn: { type: integer }
        '401':
          $ref: '#/components/responses/ErrorResponse'
  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout
      responses:
        '204':
          description: No Content
  /users:
    get:
      tags: [Users]
      summary: List users
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [Admin, Doctor, Nurse, Receptionist, Pharmacist]
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags: [Users]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    password: { type: string }
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema: { type: string }
        '400':
          $ref: '#/components/responses/ErrorResponse'
  /users/{id}:
    patch:
      tags: [Users]
      summary: Update user
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
    delete:
      tags: [Users]
      summary: Delete user
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: No Content
  /patients:
    get:
      tags: [Patients]
      summary: List patients
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: dobFrom
          schema: { type: string, format: date }
        - in: query
          name: dobTo
          schema: { type: string, format: date }
        - in: query
          name: status
          schema:
            type: string
            enum: [inpatient, outpatient, discharged]
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
    post:
      tags: [Patients]
      summary: Create patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '201':
          description: Created
  /patients/{id}:
    get:
      tags: [Patients]
      summary: Get patient
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          $ref: '#/components/responses/ErrorResponse'
    patch:
      tags: [Patients]
      summary: Update patient
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: OK
    delete:
      tags: [Patients]
      summary: Delete patient (soft)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: No Content
  /patients/{id}/history:
    get:
      tags: [Patients]
      summary: Get clinical history
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  problems:
                    type: array
                    items: { type: string }
                  allergies:
                    type: array
                    items: { type: string }
                  pastVisits:
                    type: array
                    items: { type: string }
                  medsSummary:
                    type: array
                    items: { type: string }
  /doctors:
    get:
      tags: [Doctors]
      summary: List doctors
      parameters:
        - in: query
          name: specialty
          schema: { type: string }
        - in: query
          name: availableOn
          schema: { type: string, format: date }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
    post:
      tags: [Doctors]
      summary: Create doctor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '201':
          description: Created
  /doctors/{id}:
    get:
      tags: [Doctors]
      summary: Get doctor
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
    patch:
      tags: [Doctors]
      summary: Update doctor
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '200':
          description: OK
  /doctors/{id}/schedule:
    get:
      tags: [Doctors]
      summary: Get doctor schedule
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  availability:
                    type: array
                    items:
                      type: object
                      properties:
                        start: { type: string, format: date-time }
                        end: { type: string, format: date-time }
                  booked:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
  /departments:
    get:
      tags: [Departments]
      summary: List departments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string }
                    name: { type: string }
    post:
      tags: [Departments]
      summary: Create department
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '201':
          description: Created
  /wards:
    get:
      tags: [Wards]
      summary: List wards
      parameters:
        - in: query
          name: departmentId
          schema: { type: string }
      responses:
        '200':
          description: OK
    post:
      tags: [Wards]
      summary: Create ward
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                departmentId: { type: string }
                name: { type: string }
      responses:
        '201':
          description: Created
  /beds:
    get:
      tags: [Beds]
      summary: List beds
      parameters:
        - in: query
          name: wardId
          schema: { type: string }
        - in: query
          name: status
          schema:
            type: string
            enum: [free, occupied, cleaning]
      responses:
        '200':
          description: OK
    patch:
      tags: [Beds]
      summary: Update bed status
      parameters:
        - in: path
          name: id
          required: false
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, enum: [free, occupied, cleaning] }
      responses:
        '200':
          description: OK
  /appointments:
    get:
      tags: [Appointments]
      summary: List appointments
      parameters:
        - in: query
          name: patientId
          schema: { type: string }
        - in: query
          name: doctorId
          schema: { type: string }
        - in: query
          name: date
          schema: { type: string, format: date }
        - in: query
          name: status
          schema:
            type: string
            enum: [booked, completed, cancelled]
        - in: query
          name: type
          schema:
            type: string
            enum: [physical, online]
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: OK
    post:
      tags: [Appointments]
      summary: Create appointment
      parameters:
        - in: header
          name: Idempotency-Key
          required: false
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Created
        '409':
          description: Slot conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  conflictWith:
                    $ref: '#/components/schemas/Appointment'
  /appointments/{id}:
    get:
      tags: [Appointments]
      summary: Get appointment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
    patch:
      tags: [Appointments]
      summary: Update appointment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: OK
  /appointments/{id}/remind:
    post:
      tags: [Appointments]
      summary: Trigger reminder
      responses:
        '202':
          description: Accepted
  /admissions:
    post:
      tags: [Admissions]
      summary: Admit patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admission'
      responses:
        '201':
          description: Created
    get:
      tags: [Admissions]
      summary: List admissions
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [active, discharged] }
        - in: query
          name: wardId
          schema: { type: string }
        - in: query
          name: doctorId
          schema: { type: string }
      responses:
        '200':
          description: OK
  /admissions/{id}:
    get:
      tags: [Admissions]
      summary: Get admission
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
    patch:
      tags: [Admissions]
      summary: Update admission
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admission'
      responses:
        '200':
          description: OK
  /admissions/{id}/discharge:
    post:
      tags: [Admissions]
      summary: Discharge patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dischargeAt: { type: string, format: date-time }
                summary: { type: string }
                followUpDate: { type: string, format: date }
      responses:
        '200':
          description: OK
  /encounters:
    post:
      tags: [Encounters]
      summary: Create encounter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patientId: { type: string }
                providerId: { type: string }
                appointmentId: { type: string, nullable: true }
                type: { type: string, enum: [OPD, IPD, ER] }
                notes: { type: string }
      responses:
        '201':
          description: Created
  /patients/{id}/vitals:
    get:
      tags: [Vitals]
      summary: Get vitals timeline
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    takenAt: { type: string, format: date-time }
                    bp: { type: string }
                    hr: { type: integer }
                    temp: { type: number }
                    spo2: { type: integer }
                    rr: { type: integer }
    post:
      tags: [Vitals]
      summary: Record vitals
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                takenAt: { type: string, format: date-time }
                bp: { type: string }
                hr: { type: integer }
                temp: { type: number }
                spo2: { type: integer }
                rr: { type: integer }
      responses:
        '201':
          description: Created
  /prescriptions:
    get:
      tags: [Prescriptions]
      summary: List prescriptions
      parameters:
        - in: query
          name: patientId
          schema: { type: string }
        - in: query
          name: encounterId
          schema: { type: string }
      responses:
        '200':
          description: OK
    post:
      tags: [Prescriptions]
      summary: Create prescription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prescription'
      responses:
        '201':
          description: Created
  /prescriptions/{id}:
    patch:
      tags: [Prescriptions]
      summary: Update prescription
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prescription'
      responses:
        '200':
          description: OK
  /prescriptions/{id}/cancel:
    post:
      tags: [Prescriptions]
      summary: Cancel prescription
      responses:
        '200':
          description: OK
  /drugs:
    get:
      tags: [Pharmacy]
      summary: List drugs
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: sku
          schema: { type: string }
        - in: query
          name: lowStock
          schema: { type: boolean }
        - in: query
          name: expiresBefore
          schema: { type: string, format: date }
      responses:
        '200':
          description: OK
    post:
      tags: [Pharmacy]
      summary: Create drug
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drug'
      responses:
        '201':
          description: Created
  /drugs/{id}:
    get:
      tags: [Pharmacy]
      summary: Get drug
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
    patch:
      tags: [Pharmacy]
      summary: Update drug
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drug'
      responses:
        '200':
          description: OK
  /dispense:
    post:
      tags: [Pharmacy]
      summary: Dispense prescription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prescriptionId: { type: string }
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      drugId: { type: string }
                      qty: { type: integer }
                dispensedBy: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  inventorySnapshot:
                    type: array
                    items:
                      $ref: '#/components/schemas/Drug'
  /lab/tests:
    get:
      tags: [Laboratory]
      summary: List lab tests
      responses:
        '200':
          description: OK
    post:
      tags: [Laboratory]
      summary: Create lab test (admin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabTest'
      responses:
        '201':
          description: Created
  /lab/orders:
    post:
      tags: [Laboratory]
      summary: Create lab order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabOrder'
      responses:
        '201':
          description: Created
    get:
      tags: [Laboratory]
      summary: List lab orders
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, in-progress, completed, cancelled]
        - in: query
          name: patientId
          schema: { type: string }
      responses:
        '200':
          description: OK
  /lab/orders/{id}:
    get:
      tags: [Laboratory]
      summary: Get lab order
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
    patch:
      tags: [Laboratory]
      summary: Update lab order
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabOrder'
      responses:
        '200':
          description: OK
  /lab/orders/{id}/results:
    post:
      tags: [Laboratory]
      summary: Submit lab results
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reportedBy: { type: string }
                reportedAt: { type: string, format: date-time }
                results:
                  type: array
                  items:
                    type: object
                    properties:
                      testCode: { type: string }
                      values:
                        type: array
                        items:
                          type: object
                          properties:
                            param: { type: string }
                            value: { type: number }
                            unit: { type: string }
                            ref: { type: string }
                files:
                  type: array
                  items:
                    type: object
                    properties:
                      url: { type: string, format: uri }
      responses:
        '200':
          description: OK
  /billing/invoices:
    get:
      tags: [Billing]
      summary: List invoices
      parameters:
        - in: query
          name: patientId
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: [unpaid, paid, void] }
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
      responses:
        '200':
          description: OK
    post:
      tags: [Billing]
      summary: Create invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '201':
          description: Created
  /billing/invoices/{id}:
    get:
      tags: [Billing]
      summary: Get invoice
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
    patch:
      tags: [Billing]
      summary: Update invoice
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '200':
          description: OK
  /billing/invoices/{id}/payments:
    post:
      tags: [Billing]
      summary: Add payment
      parameters:
        - in: header
          name: Idempotency-Key
          required: false
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '200':
          description: OK
  /billing/invoices/{id}/void:
    post:
      tags: [Billing]
      summary: Void invoice
      responses:
        '200':
          description: OK
  /insurance/payers:
    get:
      tags: [Insurance]
      summary: List payers
      responses:
        '200':
          description: OK
  /insurance/claims:
    post:
      tags: [Insurance]
      summary: Create claim
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                invoiceId: { type: string }
                payerId: { type: string }
                policyNo: { type: string }
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      url: { type: string, format: uri }
      responses:
        '201':
          description: Created
    get:
      tags: [Insurance]
      summary: List claims
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [submitted, approved, denied] }
      responses:
        '200':
          description: OK
  /insurance/claims/{id}:
    patch:
      tags: [Insurance]
      summary: Update claim
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, enum: [submitted, approved, denied] }
                notes: { type: string }
      responses:
        '200':
          description: OK
  /schedules:
    get:
      tags: [Scheduling]
      summary: Get schedules
      parameters:
        - in: query
          name: resourceType
          required: true
          schema: { type: string, enum: [doctor, room] }
        - in: query
          name: resourceId
          required: true
          schema: { type: string }
        - in: query
          name: from
          required: true
          schema: { type: string, format: date-time }
        - in: query
          name: to
          required: true
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
    post:
      tags: [Scheduling]
      summary: Create schedules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceType: { type: string, enum: [doctor, room] }
                resourceId: { type: string }
                slots:
                  type: array
                  items:
                    type: object
                    properties:
                      start: { type: string, format: date-time }
                      end: { type: string, format: date-time }
                      state: { type: string, enum: [available, blocked] }
      responses:
        '201':
          description: Created
  /notifications:
    get:
      tags: [Notifications]
      summary: List notifications
      responses:
        '200':
          description: OK
  /notifications/test:
    post:
      tags: [Notifications]
      summary: Send test notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                channel: { type: string, enum: [email, sms, push] }
                to: { type: string }
                template: { type: string, example: APPT_REMINDER }
                data: { type: object }
      responses:
        '202':
          description: Accepted
  /audit:
    get:
      tags: [Audit]
      summary: List audit logs
      parameters:
        - in: query
          name: actorId
          schema: { type: string }
        - in: query
          name: entityType
          schema: { type: string }
        - in: query
          name: entityId
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
  /config:
    get:
      tags: [Config]
      summary: Get config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
    patch:
      tags: [Config]
      summary: Update config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
  /reports/admissions:
    get:
      tags: [Reporting]
      summary: Admissions report
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
        - in: query
          name: groupBy
          schema: { type: string, enum: [day, department] }
      responses:
        '200':
          description: OK
  /reports/revenue:
    get:
      tags: [Reporting]
      summary: Revenue report
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
        - in: query
          name: groupBy
          schema: { type: string, enum: [day, payer] }
      responses:
        '200':
          description: OK
  /reports/occupancy:
    get:
      tags: [Reporting]
      summary: Occupancy report
      parameters:
        - in: query
          name: date
          schema: { type: string, format: date }
      responses:
        '200':
          description: OK
  /reports/lab-turnaround:
    get:
      tags: [Reporting]
      summary: Lab turnaround report
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
      responses:
        '200':
          description: OK
  /lookups:
    get:
      tags: [Lookups]
      summary: Enumerations and static reference data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  genders:
                    type: array
                    items: { type: string }
                  appointmentTypes:
                    type: array
                    items: { type: string }
                  roles:
                    type: array
                    items: { type: string }
                  labSampleTypes:
                    type: array
                    items: { type: string }
                  paymentMethods:
                    type: array
                    items: { type: string }
